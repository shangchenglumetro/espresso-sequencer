searchState.loadedDescShard("node_metrics", 0, "Node Validator Service\nMainState represents the State of the application this is …\nOptions represents the configuration options that are …\ncdn_marshal_endpoint is the endpoint for the CDN marshal …\nReturns the argument unchanged.\nReturns the argument unchanged.\ninitial_node_public_base_urls is a list of URLs that are …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nleaf_stream_base_url is the base URL for the availability …\nport is the port that the node validator service will …\nRun the service by itself.\nstake_table_source_based_url is the base URL for the …\nConstant for the version of this API.\nHotshotQueryServiceLeafStreamRetriever is a …\nLeafStreamRetriever is a general trait that allows for the …\n[MaxAttemptsExceeded] indicates that the maximum number of …\nProcessNodeIdentityUrlStreamTask is a task that processes …\nProcessProduceLeafStreamTask is a task that produce a …\nRetrieveLeafStreamError indicates the various failure …\nStateClientMessageSender allows for the retrieval of a …\nCONSTANT for protocol major version\nCONSTANT for protocol minor version\nSpecific type for version 0.1\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nget_node_identity_from_url retrieves a NodeIdentity from a …\nget_stake_table_from_sequencer retrieves the stake table …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n[new] creates a new HotshotQueryServiceLeafStreamRetriever …\n[new] creates a new [ProcessConsumeLeafStreamTask] that …\n[new] creates a new ProcessNodeIdentityUrlStreamTask that …\nnode_identity_from_scrape creates a NodeIdentity from a …\npopulate_node_identity_from_scrape populates a NodeIdentity…\npopulate_node_identity_general_from_scrape populates the …\npopulate_node_location_from_scrape populates the location …\n[process_consume_leaf_stream] produces a stream of Leafs …\n[process_node_identity_url_stream] processes a stream of …\n[retrieve_leaf_stream] attempts to retrieve the Stream of …\n[retrieve_stream] retrieves a stream of Leafs from the …\nBroadcastRollCallTask represents a task that is …\nCdnReceiveMessagesTask represents a task that is …\nConnectedNetworkConsumer represents a trait that splits up …\nConnectedNetworkPublisher represents a trait that splits …\n[broadcast_message] will broadcast the given message to …\n[broadcast_roll_call] is the function that will broadcast a\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>CdnReceiveMessagesTask</code> with the given …\nCreates a new <code>BroadcastRollCallTask</code> with the given network …\n[process_cdn_messages] is the function that will begin …\n[recv_message] will return a list of messages that have …\n[wait_for_ready] will not return until the network is …\n[wait_for_ready] will not return until the network is …\nAn external message that can be sent to or received from a …\nHotShotEventProcessingTask is a task that is capable of …\nProcessExternalMessageHandlingTask is a task that is …\nInformation about a node that is used in a roll call …\nA request for a node to respond with its identifier …\nA response to a roll call request Contains the identifier …\ncreate_node_validator_processing is a function that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n[new] creates a new HotShotEventProcessingTask that will …\n[new] creates a new ProcessExternalMessageHandlingTask …\n[process_external_messages] is a function that will …\n[process_messages] is a function that will process …\nClientId represents the unique identifier for a client …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nClientMessage represents the messages that the client can …\nInternalClientMessage represents the message requests that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n[to_internal_with_client_id] converts the ClientMessage …\nClientState represents the service state of the connected …\nClientThreadState represents the state of all of the …\nHandleConnectedError represents the scope of errors that …\nHandleRequestBlocksSnapshotsError represents the scope of …\nHandleRequestHistogramSnapshotError represents the scope …\nHandleRequestNodeIdentitySnapshotError represents the …\nInternalClientMessageProcessingTask represents an async …\nProcessClientMessageError represents the scope of errors …\nProcessDistributeBlockDetailHandlingTask represents an …\nProcessDistributeNodeIdentityHandlingTask represents an …\nProcessDistributeVotersHandlingTask represents an async …\nclone_block_detail is a utility function that clones a …\ndrop_client_client_thread_state_write_guard is a utility …\ndrop_client_no_lock_guard is a utility function for …\ndrop_failed_client_sends is a function that will drop all …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nhandle_client_message_connected is a function that …\nhandle_client_message_disconnected is a function that …\nhandle_client_message_request_blocks_snapshot is a …\nhandle_client_message_request_histogram_snapshot is a …\nhandle_client_message_request_node_identity_snapshot is a …\nhandle_client_message_request_voters_snapshot is a …\nhandle_client_message_subscribe_latest_block is a function …\nhandle_client_message_subscribe_node_identity is a …\nhandle_client_message_subscribe_voters is a function that …\nhandle_received_block_detail is a function that processes …\nhandle_received_node_identity is a function that processes …\nhandle_received_voters is a function that processes …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new ClientState with the given client_id and …\nnew creates a new InternalClientMessageProcessingTask with …\n[new] creates a new …\n[new] creates a new …\n[new] creates a new ProcessDistributeVotersHandlingTask …\nprocess_client_message is a function that processes the …\n[process_distribute_block_detail_handling_stream] is a …\n[process_distribute_node_identity_handling_stream] is a …\n[process_distribute_voters_handling_stream] is a function …\n[process_internal_client_message_stream] is a function …\nDataState represents the state of the data that is being …\nMAX_HISTORY represents the last N records that are stored …\nProcessLeafError represents the error that can occur when …\nProcessLeafStreamTask represents the task that is …\nProcessNodeIdentityError represents the error that can …\nProcessNodeIdentityStreamTask represents the task that is …\ncreate_block_detail_from_leaf is a helper function that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n[new] creates a new ProcessLeafStreamTask that will …\n[new] creates a new ProcessNodeIdentityStreamTask that …\nprocess_incoming_leaf is a helper function that will …\nprocess_incoming_node_identity is a helper function that …\n[process_leaf_stream] allows for the consumption of a …\n[process_node_identity_stream] allows for the consumption …\nLocationDetails represents the details of the location of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNodeIdentity represents the identity of the node that is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nnetwork_type is meant to represent the type of network …\nnote_type is meant to reflect the type of the node that is …\nBlocksSnapshot is a message that is sent in response to a …\nHistogramSnapshot is a message that is sent in response to …\nLatestBlock is a message that is meant to show the most …\nLatestNodeIdentity is a message that is meant to show the …\nLatestVoters is a message that is meant to show the most …\nNodeIdentitySnapshot is a message that is sent in response …\nServerMessage represents the messages that the server can …\nVotersSnapshot is a message that is sent in response to a …\nThis allows the client to know what client_id they have …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")